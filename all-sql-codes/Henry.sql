--Date_Dim
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.DATE_DIM ( 
DIMENSIONID NUMBER(38,0) NOT NULL, 
DATE DATE, 
YEARMONTHNUM NUMBER(38,0), 
CALENDAR_QUARTER VARCHAR(10), 
MONTHNUM NUMBER(38,0), 
MONTHNAME VARCHAR(20), 
MONTHSHORTNAME VARCHAR(3), 
WEEKNUM NUMBER(38,0), 
DAYNUMOFYEAR NUMBER(38,0), 
DAYNUMOFMONTH NUMBER(38,0), 
DAYNUMOFWEEK NUMBER(38,0), 
DAYNAME VARCHAR(10), 
DAYSHORTNAME VARCHAR(3), 
QUARTER NUMBER(38,0), 
YEARQUARTERNUM NUMBER(38,0), 
DAYNUMOFQUARTER NUMBER(38,0), 
primary key (DIMENSIONID) 
); 
--Office_Details 
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICE_DETAILS ( 
OFFICECODE NUMBER(38,0) NOT NULL, 
EMPLOYEENUMBER NUMBER(38,0), 
CITY VARCHAR(50) NOT NULL, 
primary key (OFFICECODE), 
foreign key (EMPLOYEENUMBER) references ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES(EMPLOYEENUMBER) 
); 
--Competitors 
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.COMPETITORS ( 
COMPETITORNAME VARCHAR(16777216), 
MARKETSHARE NUMBER(38,0), 
AVERAGE_PRICE NUMBER(38,0), 
SALES_VOLUME NUMBER(38,0), 
REGIONID NUMBER(38,0), 
foreign key (REGIONID) references ADO_GROUP3_DB.COLLECTIBLE_DIECAST.REGION(REGIONID) 
); 
--Customer_Segments 
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS ( 
CUSTOMERNUMBER NUMBER(38,0), 
TOTAL_SPENDING NUMBER(38,2), 
PAYMENT_COUNT NUMBER(38,0), 
LAST_PAYMENT_DATE DATE, 
SEGMENT VARCHAR(16777216), 
foreign key (CUSTOMERNUMBER) references ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS(CUSTOMERNUMBER) 
); 
--Facebookads 
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.FACEBOOKADS ( 
ENDS VARCHAR(16777216), 
CAMPAIGN_NAME VARCHAR(16777216), 
CAMPAIGN_DELIVERY VARCHAR(16777216), 
ATTRIBUTION_SETTING VARCHAR(16777216), 
RESULTS NUMBER(38,1), 
RESULT_INDICATOR VARCHAR(16777216), 
REACH NUMBER(38,0), 
FREQUENCY NUMBER(38,6), 
COST_PER_RESULTS NUMBER(38,9), 
"Clicks (all)" NUMBER(38,0), 
PAGE_LIKES NUMBER(38,1), 
IMPRESSIONS NUMBER(38,0), 
LINK_CLICKS NUMBER(38,1), 
"CTR (link click-through rate)" NUMBER(38,6), 
"CTR (all)" NUMBER(38,6), 
"CPC (all) (SGD)" NUMBER(38,6), 
"CPC (cost per link click) (SGD)" NUMBER(38,6), 
"CPM (cost per 1,000 impressions) (SGD)" NUMBER(38,6), 
"3-second video plays" NUMBER(38,1), 
THRUPLAYS NUMBER(38,1), 
"Cost per 3-second video plays (SGD)" NUMBER(38,6), 
"Cost per ThruPlay (SGD)" NUMBER(38,6), 
OBJECTIVE VARCHAR(16777216), 
"Amount spent (SGD)" NUMBER(38,2), 
AD_SET_BUDGET VARCHAR(16777216), 
AD_SET_BUDGET_TYPE VARCHAR(16777216), 
REPORTING_STARTS DATE, 
REPORTING_ENDS DATE 
); 
--Facebook_insights 
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.FACEBOOK_INSIGHTS ( 
DATE DATE, 
DAILY_POST_ENGAGEMENTS NUMBER(38,0), 
DAILY_NEW_FOLLOWS NUMBER(38,0), 
DAILY_NEW_LIKES NUMBER(38,0), 
"Daily Logged-in Page Views" NUMBER(38,0), 
"Daily Non-logged-in Page Views" NUMBER(38,0), 
"Daily total post like reactions of a page." NUMBER(38,0), 
DAILY_TOTAL_IMPRESSIONS NUMBER(38,0), 
DAILY_PAID_IMPRESSIONS NUMBER(38,0), 
DAILY_VIRAL_IMPRESSIONS NUMBER(38,0), 
DAILY_NONVIRAL_IMPRESSIONS NUMBER(38,0), 
DAILY_ORGANIC_IMPRESSIONS NUMBER(38,0), 
DAILY_NONVIRAL_REACH NUMBER(38,0), 
DAILY_PAID_REACH NUMBER(38,0), 
DAILY_TOTAL_REACH NUMBER(38,0), 
DAILY_VIRAL_REACH NUMBER(38,0), 
DAILY_ORGANIC_REACH NUMBER(38,0), 
DAILY_PEOPLE_TALKING_ABOUT_THIS NUMBER(38,0) 
); 
--Primary Key
-- DATE_DIM 
ALTER TABLE COLLECTIBLE_DIECAST.DATE_DIM 
ADD CONSTRAINT PK_Date_dim PRIMARY KEY (DIMENSIONID) 
 
-- OFFICE_DETAILS 
ALTER TABLE COLLECTIBLE_DIECAST.OFFICE_DETAILS 
ADD CONSTRAINT PK_Office_details PRIMARY KEY (OFFICECODE) 
 
--Foreign Key
-- OFFICE_DETAILS 
ALTER TABLE COLLECTIBLE_DIECAST.OFFICE_DETAILS 
ADD CONSTRAINT FK_employeeNumber FOREIGN KEY (employeeNumber)  
REFERENCES COLLECTIBLE_DIECAST.EMPLOYEES(employeeNumber); 
 
-- COMPETITORS 
ALTER TABLE COLLECTIBLE_DIECAST.COMPETITORS 
ADD CONSTRAINT FK_regionID FOREIGN KEY (regionID)  
REFERENCES COLLECTIBLE_DIECAST.REGION(regionID); 
 
-- CUSTOMER_SEGMENTS 
ALTER TABLE COLLECTIBLE_DIECAST. CUSTOMER_SEGMENTS 
ADD CONSTRAINT FK_customerNumber FOREIGN KEY (customerNumber)  
REFERENCES COLLECTIBLE_DIECAST.CUSTOMERS(customerNumber); 

-- TESTING RELATIONSHIP

-- Test EMPLOYEENUMBER Foreign Key in OFFICE_DETAILS (Check for orphaned EMPLOYEENUMBER values)
SELECT o.OFFICECODE, o.EMPLOYEENUMBER
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICE_DETAILS o
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES e
ON o.EMPLOYEENUMBER = e.EMPLOYEENUMBER
WHERE e.EMPLOYEENUMBER IS NULL;

-- Test REGIONID Foreign Key in COMPETITORS (Check for invalid REGIONID entries)
SELECT c.COMPETITORNAME, c.REGIONID
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.COMPETITORS c
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.REGION r
ON c.REGIONID = r.REGIONID
WHERE r.REGIONID IS NULL;

-- Test CUSTOMERNUMBER Foreign Key in CUSTOMER_SEGMENTS (Check for orphaned customers)
SELECT cs.CUSTOMERNUMBER, cs.SEGMENT
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS cs
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS cu
ON cs.CUSTOMERNUMBER = cu.CUSTOMERNUMBER
WHERE cu.CUSTOMERNUMBER IS NULL;

-- CREATE JOINED DATA

-- Join CUSTOMER_SEGMENTS and CUSTOMERS
-- Combine customer segments with customer details:
SELECT cs.CUSTOMERNUMBER, cu.CUSTOMERNAME, cs.TOTAL_SPENDING, cs.SEGMENT
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS cs
INNER JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS cu
ON cs.CUSTOMERNUMBER = cu.CUSTOMERNUMBER;

-- Join OFFICE_DETAILS and EMPLOYEES
-- Combine office details with employee data
SELECT o.OFFICECODE, o.CITY, e.FIRSTNAME, e.LASTNAME, e.JOBTITLE
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICE_DETAILS o
INNER JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES e
ON o.EMPLOYEENUMBER = e.EMPLOYEENUMBER;

-- Join COMPETITORS and REGION
-- Combine competitor details with region information
SELECT c.COMPETITORNAME, c.MARKETSHARE, c.AVERAGE_PRICE, r.REGIONDESCRIPTION
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.COMPETITORS c
INNER JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.REGION r
ON c.REGIONID = r.REGIONID;

-- CREATE GROUPBY QUERIES

-- Group Customers by Segment
-- Calculate total spending and payment count by segment
SELECT SEGMENT, SUM(TOTAL_SPENDING) AS TOTAL_SPENDING, SUM(PAYMENT_COUNT) AS TOTAL_PAYMENTS
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS
GROUP BY SEGMENT
ORDER BY TOTAL_SPENDING DESC;

-- Group Competitors by Region
-- Summarize market share and sales volume by region
SELECT r.REGIONDESCRIPTION, SUM(c.MARKETSHARE) AS TOTAL_MARKETSHARE, SUM(c.SALES_VOLUME) AS TOTAL_SALES_VOLUME
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.COMPETITORS c
INNER JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.REGION r
ON c.REGIONID = r.REGIONID
GROUP BY r.REGIONDESCRIPTION
ORDER BY TOTAL_SALES_VOLUME DESC;

-- Group Offices by City
-- Count the number of employees per office city
SELECT o.CITY, COUNT(o.EMPLOYEENUMBER) AS TOTAL_EMPLOYEES
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICE_DETAILS o
GROUP BY o.CITY
ORDER BY TOTAL_EMPLOYEES DESC;

-- Group Dates by Year and Quarter
-- Summarize the number of records in the DATE_DIM table by year and quarter
SELECT YEAR(CAST(DATE AS DATE)) AS YEAR, CALENDAR_QUARTER, COUNT(*) AS RECORD_COUNT
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.DATE_DIM
GROUP BY YEAR, CALENDAR_QUARTER
ORDER BY YEAR, CALENDAR_QUARTER;

--Data Cleaning
CREATE OR REPLACE TABLE facebook_ads AS 
SELECT  
    -- Format valid date values, but keep non-date values like 'Ongoing' 
    CASE  
        WHEN TRY_TO_DATE(ENDS, 'DD/MM/YYYY') IS NOT NULL  
        THEN TO_CHAR(TO_DATE(ENDS, 'DD/MM/YYYY'), 'YYYY-MM-DD') 
        ELSE ENDS 
    END AS ENDS, 
  
    -- Trim whitespace in text columns 
    TRIM(CAMPAIGN_NAME) AS CAMPAIGN_NAME, 
    TRIM(CAMPAIGN_DELIVERY) AS CAMPAIGN_DELIVERY, 
    TRIM(ATTRIBUTION_SETTING) AS ATTRIBUTION_SETTING, 
  
    -- Retain other columns as is 
    "CTR (link click-through rate)", 
    "CTR (all)", 
    "CPC (all) (USD)", 
    "CPC (cost per link click) (USD)", 
    "CPM (cost per 1,000 impressions) (USD)", 
    "3-second video plays", 
    THRUPLAYS, 
    "Cost per 3-second video plays (USD)", 
    "Cost per ThruPlay (USD)", 
    RESULTS, 
    RESULT_INDICATOR, 
    COST_PER_RESULTS, 
    LINK_CLICKS, 
    PAGE_LIKES, 
    OBJECTIVE, 
    "Amount spent (USD)", 
    AD_SET_BUDGET, 
    AD_SET_BUDGET_TYPE, 
    REPORTING_STARTS, 
    REPORTING_ENDS, 
    REACH, 
    FREQUENCY, 
    "Clicks (all)", 
    IMPRESSIONS 
FROM facebook_ads; 
  
SELECT * FROM facebook_ads LIMIT 100;
-- 3.1 As a customer, I want to able to see the business performance over the past year.

-- Query 1: Total Sales Volume and Revenue for the Past Year
SELECT 
    YEAR(ORDERDATE) AS Year,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenue,
    SUM(ORDERDETAILS.QUANTITYORDERED) AS TotalSalesVolume
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    YEAR(ORDERDATE);

-- Query 2: Monthly Revenue Trends for the Past Year
SELECT 
    YEAR(ORDERDATE) AS Year,
    MONTH(ORDERDATE) AS Month,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS MonthlyRevenue
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    YEAR(ORDERDATE), MONTH(ORDERDATE)
ORDER BY 
    Year, Month;

-- Query 3: Top 5 Selling Products in the Past Year
SELECT 
    PRODUCTS.PRODUCTNAME,
    SUM(ORDERDETAILS.QUANTITYORDERED) AS TotalUnitsSold,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenue
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS PRODUCTS
ON 
    ORDERDETAILS.PRODUCTCODE = PRODUCTS.PRODUCTCODE
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
ON 
    ORDERDETAILS.ORDERNUMBER = ORDERS.ORDERNUMBER
WHERE 
    ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    PRODUCTS.PRODUCTNAME
ORDER BY 
    TotalRevenue DESC
LIMIT 5;

-- 3.10 As a customer, I would like to review the employees annual performance review

-- Query 1: Employee Sales Performance Over the Past Year
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenueGenerated,
    COUNT(DISTINCT ORDERS.ORDERNUMBER) AS OrdersHandled
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
ON 
    EMPLOYEES.EMPLOYEENUMBER = ORDERS.EMPLOYEENUMBER
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    TotalRevenueGenerated DESC;

-- Query 2: Employee Memberships Managed in the Past Year
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    COUNT(CUSTOMER_MEMBERSHIP.CUSTMEMID) AS MembershipsHandled
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_MEMBERSHIP CUSTOMER_MEMBERSHIP
ON 
    EMPLOYEES.EMPLOYEENUMBER = CUSTOMER_MEMBERSHIP.EMPLOYEENUMBER
WHERE 
    CUSTOMER_MEMBERSHIP.STARTDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    MembershipsHandled DESC;

-- Query 3: All Employee Customer Segments Served 
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    COUNT(DISTINCT CUSTOMER_SEGMENTS.SEGMENT) AS SegmentsServed
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS CUSTOMERS
ON 
    EMPLOYEES.EMPLOYEENUMBER = CUSTOMERS.EMPLOYEENUMBER_CLEANED
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS CUSTOMER_SEGMENTS
ON 
    CUSTOMERS.CUSTOMERNUMBER = CUSTOMER_SEGMENTS.CUSTOMERNUMBER
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    SegmentsServed DESC;


-- 3.1 As a customer, I want to able to see the business performance over the past year.

-- View 1: Total Sales Volume and Revenue for the Past Year
CREATE OR REPLACE VIEW TotalSalesRevenuePastYear AS
SELECT 
    YEAR(ORDERS.ORDERDATE) AS Year,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenue,
    SUM(ORDERDETAILS.QUANTITYORDERED) AS TotalSalesVolume
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERS.ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    YEAR(ORDERS.ORDERDATE);

-- View 2: Monthly Revenue Trends for the Past Year
CREATE OR REPLACE VIEW MonthlyRevenueTrendsPastYear AS
SELECT 
    YEAR(ORDERS.ORDERDATE) AS Year,
    MONTH(ORDERS.ORDERDATE) AS Month,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS MonthlyRevenue
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERS.ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    YEAR(ORDERS.ORDERDATE), MONTH(ORDERS.ORDERDATE)
ORDER BY 
    Year, Month;

-- View 3: Top 5 Selling Products in the Past Year
CREATE OR REPLACE VIEW TopSellingProductsPastYear AS
SELECT 
    PRODUCTS.PRODUCTNAME,
    SUM(ORDERDETAILS.QUANTITYORDERED) AS TotalUnitsSold,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenue
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS PRODUCTS
ON 
    ORDERDETAILS.PRODUCTCODE = PRODUCTS.PRODUCTCODE
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
ON 
    ORDERDETAILS.ORDERNUMBER = ORDERS.ORDERNUMBER
WHERE 
    ORDERS.ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    PRODUCTS.PRODUCTNAME
ORDER BY 
    TotalRevenue DESC
LIMIT 5;

SELECT * FROM TotalSalesRevenuePastYear;

SELECT * FROM MonthlyRevenueTrendsPastYear;

SELECT * FROM TopSellingProductsPastYear;

-- 3.10 As a customer, I would like to review the employees annual performance review

-- View 1: Employee Sales Performance Over the Past Year
CREATE OR REPLACE VIEW EmployeeSalesPerformancePastYear AS
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    SUM(ORDERDETAILS.QUANTITYORDERED * ORDERDETAILS.PRICEEACH) AS TotalRevenueGenerated,
    COUNT(DISTINCT ORDERS.ORDERNUMBER) AS OrdersHandled
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS ORDERS
ON 
    EMPLOYEES.EMPLOYEENUMBER = ORDERS.EMPLOYEENUMBER
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS ORDERDETAILS
ON 
    ORDERS.ORDERNUMBER = ORDERDETAILS.ORDERNUMBER
WHERE 
    ORDERS.ORDERDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    TotalRevenueGenerated DESC;

-- View 2: Employee Memberships Managed in the Past Year
CREATE OR REPLACE VIEW EmployeeMembershipsManagedPastYear AS
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    COUNT(CUSTOMER_MEMBERSHIP.CUSTMEMID) AS MembershipsHandled
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_MEMBERSHIP CUSTOMER_MEMBERSHIP
ON 
    EMPLOYEES.EMPLOYEENUMBER = CUSTOMER_MEMBERSHIP.EMPLOYEENUMBER
WHERE 
    CUSTOMER_MEMBERSHIP.STARTDATE >= DATEADD(YEAR, -1, CURRENT_DATE)
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    MembershipsHandled DESC;

-- View 3: All Employee Customer Segments Served
CREATE OR REPLACE VIEW EmployeeCustomerSegmentsServed AS
SELECT 
    EMPLOYEES.EMPLOYEENUMBER,
    EMPLOYEES.LASTNAME,
    EMPLOYEES.FIRSTNAME,
    COUNT(DISTINCT CUSTOMER_SEGMENTS.SEGMENT) AS SegmentsServed
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES EMPLOYEES
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS CUSTOMERS
ON 
    EMPLOYEES.EMPLOYEENUMBER = CUSTOMERS.EMPLOYEENUMBER_CLEANED
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMER_SEGMENTS CUSTOMER_SEGMENTS
ON 
    CUSTOMERS.CUSTOMERNUMBER = CUSTOMER_SEGMENTS.CUSTOMERNUMBER
GROUP BY 
    EMPLOYEES.EMPLOYEENUMBER, EMPLOYEES.LASTNAME, EMPLOYEES.FIRSTNAME
ORDER BY 
    SegmentsServed DESC;

SELECT * FROM EmployeeSalesPerformancePastYear;

SELECT * FROM EmployeeMembershipsManagedPastYear;

SELECT * FROM EmployeeCustomerSegmentsServed;

