--Creation of Tables
-- Employees
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES (
	EMPLOYEENUMBER NUMBER(38,0) NOT NULL,
	LASTNAME VARCHAR(16777216) NOT NULL,
	FIRSTNAME VARCHAR(16777216) NOT NULL,
	EXTENSION VARCHAR(16777216) NOT NULL,
	EMAIL VARCHAR(16777216) NOT NULL,
	OFFICECODE NUMBER(38,0) NOT NULL,
	REPORTSTO NUMBER(38,0),
	JOBTITLE VARCHAR(16777216) NOT NULL,
	BIRTHDATE DATE NOT NULL,
	HIREDATE DATE NOT NULL,
	ADDRESS1 VARCHAR(16777216) NOT NULL,
	ADDRESS2 VARCHAR(16777216),
	CITY VARCHAR(16777216) NOT NULL,
	STATE VARCHAR(16777216),
	POSTALCODE VARCHAR(16777216) NOT NULL,
	COUNTRY VARCHAR(16777216) NOT NULL,
	primary key (EMPLOYEENUMBER),
	constraint FK_OFFICECODE foreign key (OFFICECODE) references ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICES(OFFICECODE),
	constraint FK_REPORTSTO foreign key (REPORTSTO) references ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES(EMPLOYEENUMBER)
);

-- Check for duplicates 
SELECT E.EMPLOYEENUMBER
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES E
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICES O
  ON E.OFFICECODE = O.OFFICECODE
WHERE O.OFFICECODE IS NULL;

--Product Lines
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_LINES (
	PRODUCTCAT NUMBER(38,0) NOT NULL,
	PRODUCTLINE VARCHAR(16777216) NOT NULL,
	TEXTDESCRIPTION VARCHAR(16777216) NOT NULL,
	constraint PK_PRODUCTCAT primary key (PRODUCTCAT)
);

--Product Reviews
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_REVIEWS (
	REVIEWID NUMBER(38,0) NOT NULL autoincrement start 1 increment 1 noorder,
	ORDERNUMBER NUMBER(38,0) NOT NULL,
	PRODUCTCODE VARCHAR(16777216) NOT NULL,
	REVIEWDATE DATE NOT NULL,
	RATING NUMBER(38,0),
	REVIEWTEXT VARCHAR(16777216),
	constraint PK_REVIEWID primary key (REVIEWID)
);

--Instagram Post
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.INSTAGRAM_POST (
	ACCOUNT_USERNAME VARCHAR(255),
	ACCOUNT_NAME VARCHAR(255),
	DESCRIPTION VARCHAR(5000),
	DURATION_SECS NUMBER(38,0),
	PUBLISH_DATE DATE,
	PERMALINK VARCHAR(2083),
	POST_TYPE VARCHAR(255),
	COMMENT VARCHAR(255),
	DATE VARCHAR(255),
	IMPRESSIONS NUMBER(38,0),
	REACH NUMBER(38,0),
	SHARES NUMBER(38,0),
	FOLLOWS NUMBER(38,0),
	VIEWS_3S NUMBER(38,0),
	LIKES NUMBER(38,0),
	COMMENTS NUMBER(38,0),
	SAVES NUMBER(38,0)
);

--Google Audience
create or replace TABLE ADO_GROUP3_DB.COLLECTIBLE_DIECAST.GOOGLE_AUDIENCE (
	USER_TYPE VARCHAR(16777216),
	SOURCE_MEDIUM VARCHAR(16777216),
	BROWSER VARCHAR(16777216),
	OPERATING_SYSTEM VARCHAR(16777216),
	COUNTRY VARCHAR(16777216),
	LANGUAGE VARCHAR(16777216),
	BROWSING_DATE DATE,
	USERS NUMBER(38,0),
	NEW_USERS NUMBER(38,0),
	SESSIONS NUMBER(38,0),
	BOUNCE_RATE FLOAT,
	AVG_SESSION_DURATION FLOAT,
	PAGEVIEWS NUMBER(38,0),
	PAGES_PER_SESSION FLOAT
);

--Data Cleansing
Other Data cleansing like dates were done on jupyter notebook.
-- For the Rating column in Product Reviews
UPDATE Product_Reviews 
SET ReviewText = CASE 
                    WHEN Rating = 5 THEN 'Excellent product!' 
                    WHEN Rating = 4 THEN 'Very good quality.' 
                    WHEN Rating = 3 THEN 'Average, could be better.' 
                    WHEN Rating = 2 THEN 'Not satisfied.' 
                    ELSE 'Poor quality.' 
                 END; 

--Queries to Test Relationships & Basic Data Exploration

--Test Product Reviews and Order Details Relationship
SELECT PR.REVIEWID, PR.ORDERNUMBER, PR.PRODUCTCODE, PR.RATING, PR.REVIEWTEXT, OD.PRICEEACH, OD.QUANTITYORDERED
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_REVIEWS PR
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS OD
ON PR.ORDERNUMBER = OD.ORDERNUMBER AND PR.PRODUCTCODE = OD.PRODUCTCODE;

--Test Employees and Offices Relationship
SELECT PR.REVIEWID, PR.ORDERNUMBER, PR.PRODUCTCODE, PR.RATING, PR.REVIEWTEXT, 
       OD.PRICEEACH, OD.QUANTITYORDERED
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_REVIEWS PR
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS OD
  ON PR.ORDERNUMBER = OD.ORDERNUMBER 
  AND PR.PRODUCTCODE = OD.PRODUCTCODE;

-- Test Products and ProductLines Relationship
SELECT P.PRODUCTCODE, P.PRODUCTNAME, P.PRODUCTLINE, PL.TEXTDESCRIPTION
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS P
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_LINES PL
  ON P.PRODUCTLINE = PL.PRODUCTLINE;

--Test Employees and Managers (Self-referential relationship)
SELECT E1.EMPLOYEENUMBER AS EMPLOYEE_ID, 
       E1.FIRSTNAME || ' ' || E1.LASTNAME AS EMPLOYEE_NAME,
       E2.EMPLOYEENUMBER AS SUPERVISOR_ID,
       E2.FIRSTNAME || ' ' || E2.LASTNAME AS SUPERVISOR_NAME
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES E1
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES E2
ON E1.REPORTSTO = E2.EMPLOYEENUMBER
ORDER BY SUPERVISOR_ID, EMPLOYEE_NAME;

-- Check for Orders with No Details
SELECT O.ORDERNUMBER
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS O
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS OD
  ON O.ORDERNUMBER = OD.ORDERNUMBER
WHERE OD.ORDERNUMBER IS NULL;

--Check that Products Belong to Valid Product Lines
SELECT P.PRODUCTCODE, P.PRODUCTNAME, P.PRODUCTLINE
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS P
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_LINES PL
  ON P.PRODUCTLINE = PL.PRODUCTLINE
WHERE PL.PRODUCTLINE IS NULL;

--Check for Employees Without Offices
SELECT E.EMPLOYEENUMBER, E.FIRSTNAME, E.LASTNAME
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES E
LEFT JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.OFFICES O
  ON E.OFFICECODE = O.OFFICECODE
WHERE O.OFFICECODE IS NULL;

--Find Number of Employees in Countries
SELECT COUNTRY, COUNT(*) AS employees_in_country
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.EMPLOYEES
GROUP BY COUNTRY
ORDER BY employees_in_country DESC;


-- Find Top 5 Countries by Number of Customers
SELECT COUNTRY, COUNT(*) AS CustomerCount
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS
GROUP BY COUNTRY
ORDER BY CustomerCount DESC
LIMIT 5;

--Find Products with the Highest Stock
SELECT PRODUCTNAME, QUANTITYINSTOCK
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS
ORDER BY QUANTITYINSTOCK DESC
LIMIT 10;

--Average Order Amount by Customer
SELECT C.CUSTOMERNAME, AVG(OD.PRICEEACH * OD.QUANTITYORDERED) AS AvgOrderAmount
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS C
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS O
  ON C.CUSTOMERNUMBER = O.CUSTOMERNUMBER
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS OD
  ON O.ORDERNUMBER = OD.ORDERNUMBER
GROUP BY C.CUSTOMERNAME
ORDER BY AvgOrderAmount DESC
LIMIT 10;

--Identify Most Popular Product Categories
SELECT PL.PRODUCTLINE, SUM(OD.QUANTITYORDERED) AS TotalSold
FROM ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS OD
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS P
  ON OD.PRODUCTCODE = P.PRODUCTCODE
JOIN ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_LINES PL
  ON P.PRODUCTLINE = PL.PRODUCTLINE
GROUP BY PL.PRODUCTLINE
ORDER BY TotalSold DESC;
--Views which were switched from queries
--3.2 As a customer, I want to be able to explore the possibilities of expanding the company's customer base.
-- Geographical analysis of Product Sales by Country
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.TOTAL_PRODUCT_SALES_BY_COUNTRY AS
SELECT 
    c.country AS Country, 
    p.productName AS Product, 
    SUM(od.quantityOrdered) AS TotalQuantitySold
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS o
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS c 
    ON o.customerNumber = c.customerNumber
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od 
    ON o.orderNumber = od.orderNumber
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS p 
    ON od.productCode = p.productCode
GROUP BY 
    c.country, p.productName
ORDER BY 
    c.country, TotalQuantitySold DESC;

-- Identify low-penetration products
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.LOW_PENETRATION_PRODUCTS AS
SELECT 
    p.productName AS ProductName, 
    COALESCE(SUM(od.quantityOrdered), 0) AS TotalQuantitySold
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS p
LEFT JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od 
    ON p.productCode = od.productCode
GROUP BY 
    p.productName
ORDER BY 
    TotalQuantitySold ASC
LIMIT 10;

-- Identify high value Customers
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.HIGH_VALUE_CUSTOMERS AS
SELECT 
    c.customernumber AS CustomerNumber, 
    c.customerName AS CustomerName, 
    SUM(od.quantityordered * od.priceeach) AS TotalSpent
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.CUSTOMERS c
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS o 
    ON c.customernumber = o.customernumber
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od 
    ON o.ordernumber = od.ordernumber
GROUP BY 
    c.customernumber, c.customerName
ORDER BY 
    TotalSpent DESC;

--3.6 As a customer, I want to improve on our inventory management through analysing product selling rate.
-- Sales Trends By Product Line
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.SALES_TRENDS_BY_PRODUCT_LINE AS
SELECT 
    pl.productLine AS ProductCategory, 
    SUM(od.quantityOrdered) AS TotalSold
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS p 
    ON od.productCode = p.productCode
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCT_LINES pl 
    ON p.productLine = pl.productLine
GROUP BY 
    pl.productLine
ORDER BY 
    TotalSold DESC;

-- Seasonal Selling Patterns
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.SEASONAL_SELLING_PATTERNS AS
SELECT 
    p.productName AS Product, 
    TO_CHAR(o.orderDate, 'MM') AS Month, 
    SUM(od.quantityOrdered) AS TotalSold
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS o
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od 
    ON o.orderNumber = od.orderNumber
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS p 
    ON od.productCode = p.productCode
GROUP BY 
    p.productName, TO_CHAR(o.orderDate, 'MM')
ORDER BY 
    Month, TotalSold DESC;

-- Average Selling Rate
CREATE OR REPLACE VIEW ADO_GROUP3_DB.COLLECTIBLE_DIECAST.AVERAGE_SELLING_RATE AS
SELECT 
    p.productName AS Product, 
    SUM(od.quantityOrdered) / DATEDIFF(DAY, MIN(o.orderDate), MAX(o.orderDate)) AS DailySellingRate
FROM 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDERS o
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.ORDER_DETAILS od 
    ON o.orderNumber = od.orderNumber
JOIN 
    ADO_GROUP3_DB.COLLECTIBLE_DIECAST.PRODUCTS p 
    ON od.productCode = p.productCode
GROUP BY 
    p.productName
ORDER BY 
    DailySellingRate DESC;